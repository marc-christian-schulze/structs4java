/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.12/userguide/custom_plugins.html in the Gradle documentation.
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`

    id("com.gradle.plugin-publish") version "1.3.0"
}

repositories {
    mavenLocal()
    // Use Maven Central for resolving dependencies.
    mavenCentral()

    maven(url = "../../.m2")
    google()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    implementation("com.github.marc-christian-schulze.structs4java:structs4java-core:${project.version}")

    implementation("com.android.tools.build:gradle-api:8.1.2")
}

gradlePlugin {
    // Define the plugin
    val structs4java by plugins.creating {
        group = "io.github.marc-christian-schulze.structs4java"
        id    = "io.github.marc-christian-schulze.structs4java.structs4java-gradle-plugin"
        implementationClass = "org.structs4java.Structs4javaGradlePlugin"
        website.set("https://github.com/marc-christian-schulze/structs4java")
        vcsUrl.set("https://github.com/marc-christian-schulze/structs4java.git")
        displayName = "Structs4Java Gradle Plugin"
        description = "Structs4Java is a code generator based on C/C++ structures."
        tags = listOf("generator", "structs")
    }
}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])
configurations["functionalTestRuntimeOnly"].extendsFrom(configurations["testRuntimeOnly"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
    testLogging.events("failed")
    testLogging.exceptionFormat = TestExceptionFormat.FULL
    testLogging.showExceptions = true
    testLogging.showCauses = true
}

gradlePlugin.testSourceSets.add(functionalTestSourceSet)

tasks.named<Task>("check") {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

tasks.named<Test>("test") {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}

tasks.withType<JavaCompile> {
    options.release = 17
}
