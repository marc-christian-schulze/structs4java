grammar org.structs4java.Structs4JavaDsl hidden(WS)
generate structs4JavaDsl "http://www.structs4java.org/Structs4JavaDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

StructsFile:
	{StructsFile}
	
	SL_COMMENT*
	
	('package' name=QualifiedName ';')?
	
	SL_COMMENT*
	
	(imports += Import)*
	
	(structs += StructDeclaration | enums += EnumDeclaration)*
	
	SL_COMMENT*
;

Import:
    'import' importedNamespace=QualifiedNameWithWildcard ';'
;
	
QualifiedNameWithWildcard:
    QualifiedName '.*'?
;

ComplexTypeDeclaration:
	StructDeclaration | EnumDeclaration
;
	
StructDeclaration:
	{StructDeclaration}
	(comments += SL_COMMENT)*
	'struct' name=ID 
	('implements' implements+=[jvmTypes::JvmType|QualifiedName] (',' implements+=[jvmTypes::JvmType|QualifiedName])*)?
	'{'
		(members += Member)*
		SL_COMMENT*
	'}'
;

Member:
	IntegerMember | FloatMember | StringMember | ComplexTypeMember | BitfieldMember
;

EnumDeclaration:
	{EnumDeclaration}
	(comments += SL_COMMENT)*
	'enum' name=ID ':' typename=INTEGER_TYPE '{'
		(items += Item)*
		SL_COMMENT*
	'}'
;

BitfieldMember:
	(comments += SL_COMMENT)*
	'bitfield' typename=INTEGER_TYPE (array=ArrayDimension)? ('padding' '(' padding=LONG ( ',' 'using' '=' using=LONG )? ')')? '{'
		(entries += BitfieldEntry)*
	'}'
;

BitfieldEntry:
	(comments += SL_COMMENT)* typename=INTEGER_TYPE name=ID (array=ArrayDimension)? ':' bits=LONG ';'
|   (comments += SL_COMMENT)* typename=BOOLEAN_TYPE name=ID (array=ArrayDimension)? ':' bits=LONG ';'
|   (comments += SL_COMMENT)* type=[EnumDeclaration] name=ID (array=ArrayDimension)? ':' bits=LONG ';'
;

Item:
	(comments += SL_COMMENT)*
	name=ID '=' value=LONG ','?
;

ComplexTypeMember:
	(comments += SL_COMMENT)*
	type=[ComplexTypeDeclaration|QualifiedName] name=ID
	(array=ArrayDimension)?
	('padding' '(' padding=LONG ( ',' 'using' '=' using=LONG )? ')')?
	';'
;

IntegerMember:
	(comments += SL_COMMENT)*
	typename=INTEGER_TYPE name=ID 
	(array=ArrayDimension)?
	(
		('sizeof' '(' sizeof=[Member] ')')? &
		('sizeof' '(' sizeofThis?='this' ')')? &
		('countof' '(' countof=[Member] ')')?
	)
	('padding' '(' padding=LONG ( ',' 'using' '=' using=LONG )? ')')?
	';'
;

FloatMember:
	(comments += SL_COMMENT)*
	typename=FLOAT_TYPE name=ID 
	(array=ArrayDimension)?
	('padding' '(' padding=LONG ( ',' 'using' '=' using=LONG )? ')')?
	';'
;

StringMember:
	(comments += SL_COMMENT)*
	typename=STRING_TYPE name=ID 
	(array=ArrayDimension)?
	('encoding' '(' encoding=STRING ')')?
	('padding' '(' padding=LONG ( ',' 'using' '=' using=LONG )? ')')?
	(nullTerminated='null-terminated')?
	';'
;

ArrayDimension:
	{ArrayDimension} '[' (dimension=LONG)? ']'
;

QualifiedName:
    ID ('.' ID)*
;

terminal LONG returns ecore::ELong: ('0'..'9')+ | '0x' ('0'..'9' | 'A'..'F' | 'a'..'f')+;
terminal STRING	: 
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
		; 
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal INTEGER_TYPE:
	'uint8_t' | 'uint16_t' | 'uint32_t' | 'uint64_t' |
	 'int8_t' | 'int16_t'  | 'int32_t'  | 'int64_t'
;

terminal BOOLEAN_TYPE:
	'boolean'
;
	
terminal FLOAT_TYPE:
	'float' | 'double'
;

terminal STRING_TYPE:
	'char'
;

terminal ID: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
